// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feeds.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO feeds (id, created_at, updated_at, name, url, user_id)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
RETURNING id, created_at, updated_at, name, url, user_id, last_fetched_at
`

type CreateFeedParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Url       string
	UserID    uuid.UUID
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Url,
		arg.UserID,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.LastFetchedAt,
	)
	return i, err
}

const getNextFeedToFetch = `-- name: GetNextFeedToFetch :one
SELECT feeds.id, feeds.created_at, feeds.updated_at, name, url, feeds.user_id, last_fetched_at, feed_follows.id, feed_follows.created_at, feed_follows.updated_at, feed_follows.user_id, feed_id
FROM feeds
INNER JOIN feed_follows on feed_follows.feed_id = feeds.id
WHERE feed_follows.user_id = $1
ORDER BY feeds.last_fetched_at NULLS FIRST
LIMIT 1
`

type GetNextFeedToFetchRow struct {
	ID            uuid.UUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
	Name          string
	Url           string
	UserID        uuid.UUID
	LastFetchedAt sql.NullTime
	ID_2          uuid.UUID
	CreatedAt_2   time.Time
	UpdatedAt_2   time.Time
	UserID_2      uuid.UUID
	FeedID        uuid.UUID
}

func (q *Queries) GetNextFeedToFetch(ctx context.Context, userID uuid.UUID) (GetNextFeedToFetchRow, error) {
	row := q.db.QueryRowContext(ctx, getNextFeedToFetch, userID)
	var i GetNextFeedToFetchRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.LastFetchedAt,
		&i.ID_2,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.UserID_2,
		&i.FeedID,
	)
	return i, err
}

const markFeedsFetched = `-- name: MarkFeedsFetched :exec
UPDATE feeds
SET updated_at = $1, last_fetched_at = $1
WHERE id = $2
`

type MarkFeedsFetchedParams struct {
	UpdatedAt time.Time
	ID        uuid.UUID
}

func (q *Queries) MarkFeedsFetched(ctx context.Context, arg MarkFeedsFetchedParams) error {
	_, err := q.db.ExecContext(ctx, markFeedsFetched, arg.UpdatedAt, arg.ID)
	return err
}

const printFeeds = `-- name: PrintFeeds :many
SELECT feeds.name, feeds.url, users.name
FROM feeds
INNER JOIN users on users.id = feeds.user_id
`

type PrintFeedsRow struct {
	Name   string
	Url    string
	Name_2 string
}

func (q *Queries) PrintFeeds(ctx context.Context) ([]PrintFeedsRow, error) {
	rows, err := q.db.QueryContext(ctx, printFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PrintFeedsRow
	for rows.Next() {
		var i PrintFeedsRow
		if err := rows.Scan(&i.Name, &i.Url, &i.Name_2); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
